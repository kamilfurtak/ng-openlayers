name: CI

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ "master" ]
  workflow_dispatch:
  workflow_call:

permissions:
  actions: read
  contents: read

env:
  RELEASE_MESSAGE: 'chore(release): publish'

jobs:
  build:
    outputs:
      release_message: ${{ env.RELEASE_MESSAGE }}
    name: Build
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      #      - run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="e2e-ci"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps --include=optional
      - uses: nrwl/nx-set-shas@v4
        with:
          # The "main" branch of your repository (the base branch which you target with PRs).
          # Common names for this branch include main and master.
          #
          # Default: main
          main-branch-name: 'master'

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: npx nx-cloud record -- echo Hello World
      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      #      - run: npx nx affected -t lint test build
      #      - run: npx nx affected -t build
      - run: npm run test-ci

      - run: npm run build
      #      - run: npx nx affected --parallel 1 -t e2e-ci
      - name: Upload static files as artifact
        uses: actions/upload-pages-artifact@v3      # Upload the build artifacts
        with:
          path: ./dist/apps/demo-ng-openlayers  # Adjust to your build output directory
  publish_to_npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # needed for provenance data generation
    timeout-minutes: 10
    needs: build
    if: |
      contains(github.event.head_commit.message, 'chore(release): publish')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci --legacy-peer-deps --include=optional
        shell: bash

      - run: npm run build:lib

      - name: Print Environment Info
        run: npx nx report
        shell: bash

      - name: Publish packages
        run: |
          git config --global user.email "kamil@fcomp.dev"
          git config --global user.name "Kamil Furtak"
          npm run copy:lib:docs
          npx nx release publish
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
  # Deployment job
  deploy-github-pages:
    name: Deploy to GitHub Pages
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    #    if: github.ref == 'refs/heads/master'
    if: |
      contains(github.event.head_commit.message, 'chore(release): publish')
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
